schedules:
- cron: "0 0 * * 1-5/2"
  displayName: Daily midnight build
  branches:
    include:
    - master

trigger:
- master

strategy:
  matrix:
    Linux Chrome:
      imageName: "ubuntu-latest"
      BROWSER: "Chrome"
    Linux Firefox:
      imageName: "ubuntu-latest"
      BROWSER: "Firefox"
    MacOs Chrome:
      imageName: "macos-latest"
      BROWSER: "Chrome"
    MacOs Firefox:
      imageName: "macos-latest"
      BROWSER: "Firefox"
    MacOs Safari:
      imageName: "macos-latest"
      BROWSER: "Safari"
    Windows Chrome:
      imageName: "windows-latest"
      BROWSER: "Chrome"
    Windows Edge:
      imageName: "windows-latest"
      BROWSER: "Edge"
    Windows Firefox:
      imageName: "windows-latest"
      BROWSER: "Firefox"
    Windows Internet Explorer:
      imageName: "windows-latest"
      BROWSER: "IE"
  maxParallel: 10

pool:
  vmImage: $(imageName)

variables:
  solution: '**/*.sln'
  project: '**/*Tests/*.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Debug'

steps:
- script: |
      sudo apt update
      sudo apt install firefox
  displayName: 'Install Firefox on Linux'
  condition: and(contains(variables.BROWSER, 'Firefox'), contains(variables.imageName, 'ubuntu-latest'))

- script: |
      brew cask install firefox
  displayName: 'Install Firefox on Mac Os'
  condition: and(contains(variables.BROWSER, 'Firefox'), contains(variables.imageName, 'macos-latest'))

- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 2.2.x'
  inputs:
    version: '2.2.x'
    packageType: runtime

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '$(project)'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: '$(project)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '$(project)'
    arguments: '--configuration $(buildConfiguration)'

- task: CopyFiles@2
  displayName: Copy Allure Results
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)/ProjectTests/bin/Debug/netcoreapp2.2/allure-results'
    Contents: '**'
    TargetFolder: '$(build.artifactstagingdirectory)/$(Agent.OS)_$(BROWSER)/allure-results'
  condition: succeededOrFailed()

- task: CopyFiles@2
  displayName: Copy Logs
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)/ProjectTests/bin/Debug/netcoreapp2.2/Logs'
    Contents: '**'
    TargetFolder: '$(build.artifactstagingdirectory)/$(Agent.OS)_$(BROWSER)/Logs'
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: false
    projects: '$(project)'
    arguments: '--configuration $(buildConfiguration) -o $(build.artifactstagingdirectory)'
    zipAfterPublish: false
    modifyOutputPath: false
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()
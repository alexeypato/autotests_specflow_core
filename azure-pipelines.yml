schedules:
- cron: "0 0 * * 1-5/2"
  displayName: Daily midnight build
  branches:
    include:
    - master

trigger:
- master

strategy:
  matrix:
    Linux Chrome:
      imageName: "ubuntu-latest"
      browserApp: "google-chrome-stable"
      BROWSER: "Chrome"
    Linux Firefox:
      imageName: "ubuntu-latest"
      browserApp: "firefox"
      BROWSER: "Firefox"
    MacOs Chrome:
      imageName: "macos-latest"
      BROWSER: "Chrome"
    MacOs Firefox:
      imageName: "macos-latest"
      BROWSER: "Firefox"
    MacOs Safari:
      imageName: "macos-latest"
      BROWSER: "Safari"
    Windows Chrome:
      imageName: "windows-latest"
      BROWSER: "Chrome"
#    Windows Edge:
#      imageName: "windows-latest"
#      BROWSER: "Edge"
    Windows Firefox:
      imageName: "windows-latest"
      BROWSER: "Firefox"
    Windows Internet Explorer:
      imageName: "windows-latest"
      BROWSER: "IE"
  maxParallel: 10

pool:
  vmImage: $(imageName)

variables:
  solution: '**/*.sln'
  project: '**/*Tests/*.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Debug'
  allureResults: '$(System.DefaultWorkingDirectory)/ProjectTests/bin/Debug/netcoreapp3.1/'
  allureVersion: '2.13.2'

steps:
- script: |
      sudo apt update
      sudo apt install $(browserApp)
      cd /opt
      wget -c https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/$(allureVersion)/allure-commandline-$(allureVersion).tgz -O - | tar -xz && chmod +x /opt/allure-$(allureVersion)/bin/allure
  displayName: 'Install latest $(browserApp) and allure on Linux'
  condition: contains(variables.imageName, 'ubuntu-latest')

- script: |
      brew install allure
  displayName: 'Install allure on Mac Os'
  condition: contains(variables.imageName, 'macos-latest')

- task: PowerShell@2
  displayName: 'Install allure on Windows'
  inputs:
    targetType: 'inline'
    script: |
      iwr -useb get.scoop.sh | iex
      scoop install allure
  condition: contains(variables.imageName, 'windows-latest')

- script: |
      brew cask install firefox
  displayName: 'Install Firefox on Mac Os'
  condition: and(contains(variables.BROWSER, 'Firefox'), contains(variables.imageName, 'macos-latest'))

- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 3.1.x'
  inputs:
    version: '3.1.x'
    packageType: sdk

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '$(project)'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: '$(project)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '$(project)'
    arguments: '--configuration $(buildConfiguration)'

- task: CmdLine@2
  displayName: 'Allure generate report on Windows'
  inputs:
    script: |
      $(USERNAME)\scoop\apps\allure\$(allureVersion)\bin\allure generate allure-results -o ''$(build.artifactstagingdirectory)\$(Agent.OS)_$(BROWSER)\allure-report'' -c
    workingDirectory: '$(allureResults)'
  condition: contains(variables.imageName, 'windows-latest')

- task: CmdLine@2
  displayName: 'Allure generate report on Linux'
  inputs:
    script: '/opt/allure-$(allureVersion)/bin/allure generate allure-results -o ''$(build.artifactstagingdirectory)/$(Agent.OS)_$(BROWSER)/allure-report'' -c'
    workingDirectory: '$(allureResults)'
  condition: contains(variables.imageName, 'ubuntu-latest')

- task: CmdLine@2
  displayName: 'Allure generate report on Mac Os'
  inputs:
    script: 'allure generate allure-results -o ''$(build.artifactstagingdirectory)/$(Agent.OS)_$(BROWSER)/allure-report'' -c'
    workingDirectory: '$(allureResults)'
  condition: contains(variables.imageName, 'macos-latest')

- task: CopyFiles@2
  displayName: Copy Allure Results
  inputs:
    SourceFolder: '$(allureResults)allure-results'
    Contents: '**'
    TargetFolder: '$(build.artifactstagingdirectory)/$(Agent.OS)_$(BROWSER)/allure-results'
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()
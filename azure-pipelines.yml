schedules:
- cron: "0 0 * * 1-5/2"
  displayName: Daily midnight build
  branches:
    include:
    - master

trigger:
- master

strategy:
  matrix:
    Linux Firefox:
      imageName: "ubuntu-latest"
      BROWSER: "Firefox"
    MacOs Chrome:
      imageName: "macos-10.14"
      BROWSER: "Chrome"
    MacOs Firefox:
      imageName: "macos-10.14"
      BROWSER: "Firefox"
    MacOs Safari:
      imageName: "macos-10.14"
      BROWSER: "Safari"
    Windows Chrome:
      imageName: "windows-latest"
      BROWSER: "Chrome"
    Windows Firefox:
      imageName: "windows-latest"
      BROWSER: "Firefox"
  maxParallel: 10

pool:
  vmImage: $(imageName)

variables:
  solution: '**/*.sln'
  project: '**/*Tests/*.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Debug'

steps:
# install the required .NET Core SDK version
# only necessary if the agent doesn't already have the required SDK
- script: |
      sudo apt-get install firefox
  displayName: 'Install Chrome and Firefox'
  condition: and(contains(variables.BROWSER, 'Firefox'), contains(variables.imageName, 'ubuntu-latest'))

- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 2.2.x'
  inputs:
    version: '2.2.x'
    packageType: runtime

# restore Nuget packages/dependencies
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '$(project)'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: '$(project)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '$(project)'
    arguments: '--configuration $(buildConfiguration)'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)/ProjectTests/bin/Debug/netcoreapp2.2'
    Contents: '**'
    TargetFolder: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()

# publish the UI test project to the SeleliumTest subfolder in the Artifact Staging Directory
# optionally, you can add more steps to publish your own website alongside your SeleniumTests in another task
- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: false
    projects: '$(project)'
    arguments: '--configuration $(buildConfiguration) -o $(build.artifactstagingdirectory)'
    zipAfterPublish: false
    modifyOutputPath: false
  condition: succeededOrFailed()

# publish all artifacts in the Artifact Stagign Directory
# this will place the UI Test artifacts in Azure DevOps for future use in the deployment pipeline
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()